package core

// Represents the type annotation in an AST node
type TypeData interface {
	Id() uint64                  // Unique identifier for the type instance
	Tag() string                 // Used as a short name identifier of the type for debugging
	Signature() string           // Used as a code representation for errors and type identification for the user
	Accepts(other TypeData) bool // Checks if the other type can be assignable into this type
	Default() (AstData, error)   // Returns the default initialization value of the type
}

// Represents a TypeData that can be applicable (e.g. `x()`)
type ApplicableTypeData interface {
	Apply(args []TypeData) (TypeData, error) // Returns type type information generated by applying (call) the value attached to this type
}

// Represents a TypeData that can be accessed by a dot (e.g. `x.y`)
type AccessibleTypeData interface {
	AccessValue(name string) (*AstNode, error) // Returns the value of the field with the given name
	AccessType(name string) (TypeData, error)  // Returns the value of the field with the given name
}
